// to deploy .rules file
// firebase deploy --only firestore:rules

service cloud.firestore {
  match /databases/{database}/documents {

    // *** GENERAL
    function isAuthenticated() {
        return request.auth.uid != null;
    }

    // *** BETS
    match /bets/{betId} {
       // reading data is allowed for logged in users or public bets
       allow read: if isAuthenticated() || isPublic();

       // a logged in user can create a bet
       allow create: if isAuthenticated();

       // a admin user can update the bet. Another user can only change his participant info and not change any other data.
       allow update: if isAdmin() || betDataIsUnchanged();

       // only admins can delete a bet
       allow delete: if isAdmin();
    }

    function isPublic() {
        return resource.data.visibility == 'public'
    }

    function isAdmin() {
        return request.auth.uid == resource.data.admin;
    }

    function betDataIsUnchanged() {
        return request.resource.data.admin == resource.data.admin &&
                request.resource.data.dateCreated == resource.data.dateCreated &&
                request.resource.data.dateEnd == resource.data.dateEnd &&
                request.resource.data.description == resource.data.description &&
                request.resource.data.title == resource.data.title &&
                request.resource.data.visibility == resource.data.visibility;
    }

    // *** USER
    match /users/{userId} {
        // reading user data is allowed for any logged in user
        allow read: if isAuthenticated();

        // a logged in user is be able to create its and (only its!) user object
        allow create: if request.auth.uid == userId;

        // a user can update it's data. Another user can only invite him to a bet and not change any other data.
        allow update: if isUserData(userId) || userDataIsUnchanged();

        // a user can only delete his own user data
        allow delete: if isUserData(userId);
    }

    function isUserData(userId) {
        return resource.data.uid == request.auth.uid == userId;
    }

    function userDataIsUnchanged() {
        return request.resource.data.displayName == resource.data.displayName &&
                request.resource.data.email == resource.data.email &&
                request.resource.data.emailVerified == resource.data.emailVerified &&
                request.resource.data.photoURL == resource.data.photoURL &&
                request.resource.data.uid == resource.data.uid;
    }
  }
}